name: CI Flask App

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar versión de Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.2"

      # 3. Configurar variables de entorno
      - name: Setup environment variables
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: |
          echo "DB_HOST=${{ vars.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_USER=${{ vars.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
          echo "DB_NAME=${{ vars.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ vars.DB_PORT }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=$JWT_SECRET_KEY" >> $GITHUB_ENV
          echo "JWT_ALGORITHM=${{ vars.JWT_ALGORITHM }}" >> $GITHUB_ENV
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "FLASK_DEBUG=false" >> $GITHUB_ENV

      # 4. Verificar variables
      - name: Verify environment variables
        run: |
          echo "=== Environment Variables ==="
          echo "DB_HOST: $DB_HOST"
          echo "DB_USER: $DB_USER"
          echo "DB_NAME: $DB_NAME"
          echo "DB_PORT: $DB_PORT"
          echo "FLASK_ENV: $FLASK_ENV"

      # 5. Instalar dependencias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-dotenv
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 6. Linter 
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # 7. Tests 
      - name: Run tests
        run: |
          pip install pytest
          pytest -v || echo "No tests found"

      # 8. Correr la app con mejor manejo
      - name: Run Flask app
        run: |
          # Ejecutar la app en segundo plano
          nohup python app.py > app.log 2>&1 &
          echo $! > app.pid
          
          # Esperar y verificar que la app esté respondiendo
          sleep 10
          
          echo "=== Verificando estado de la aplicación ==="
          curl -f http://127.0.0.1:5000/health || echo "Health check failed, checking root..."
          curl -f http://127.0.0.1:5000/ || (echo "App did not start properly" && cat app.log && exit 1)
          
          echo "✓ App started successfully"
          cat app.log

      # 9. Limpiar proceso
      - name: Cleanup
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) 2>/dev/null || true
          fi